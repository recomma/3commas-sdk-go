//go:build ignore
// +build ignore

// error_helpers_gen.go generates GetJSONxxx helper methods for response structs.
// It scans openapi.gen.go for structs ending with "Response" that have fields prefixed with "JSON"
// and emits a file error_helpers.gen.go containing methods like GetJSON418().
//
// Usage:
//   //go:generate go run error_helpers_gen.go
//
// Then:
//   go generate

package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"log"
	"os"
	"strings"
)

var (
	inputPath   = flag.String("input", "", "Path to the Go source file or directory to scan for Params structs")
	outputPath  = flag.String("output", "", "Path to the generated Go file")
	packageName = flag.String("package", "", "Package name for the generated file (defaults to input package)")
)

func main() {
	flag.Parse()
	if *inputPath == "" || *outputPath == "" {
		flag.Usage()
		os.Exit(1)
	}

	fset := token.NewFileSet()
	// Parse the generated API file
	file, err := parser.ParseFile(fset, *inputPath, nil, parser.AllErrors)
	if err != nil {
		log.Fatalf("failed to parse file: %v", err)
	}
	if *packageName == "" {
		packageName = &file.Name.Name
	}

	var builder strings.Builder
	builder.WriteString("// Code generated by error_helpers_gen.go; DO NOT EDIT.\n\n")
	builder.WriteString(fmt.Sprintf("package %s\n\n", *packageName))

	type resperr struct {
		Name  string
		Type  string
		Count int
	}
	interfaces := make(map[string]resperr)

	// Walk declarations
	for _, decl := range file.Decls {
		gen, ok := decl.(*ast.GenDecl)
		if !ok || gen.Tok != token.TYPE {
			continue
		}
		for _, spec := range gen.Specs {
			ts, ok := spec.(*ast.TypeSpec)
			st, ok := ts.Type.(*ast.StructType)
			if !ok {
				continue
			}

			// For each field in the struct
			for _, field := range st.Fields.List {
				// Look for named fields like JSON418
				for _, name := range field.Names {
					if strings.HasPrefix(name.Name, "JSON") {
						// we don't want 2xx responses
						if strings.Contains(name.Name, "20") {
							continue
						}
						// Render the field's type back to source
						var buf strings.Builder
						err := printer.Fprint(&buf, fset, field.Type)
						if err != nil {
							continue
						}
						fieldType := buf.String()

						// Emit method
						builder.WriteString(fmt.Sprintf("func (r *%s) Get%s() %s {\n", ts.Name.Name, name.Name, fieldType))
						builder.WriteString(fmt.Sprintf("\treturn r.%s\n", name.Name))
						builder.WriteString("}\n\n")

						v, ok := interfaces[name.Name]
						if !ok {
							// Emit interface
							builder.WriteString(fmt.Sprintf("type Get%s interface {\n", name.Name))
							builder.WriteString(fmt.Sprintf("\t%s() %s\n", name.Name, fieldType))
							builder.WriteString("}\n\n")
							// interfaces = append(interfaces, name.Name)
							interfaces[name.Name] = resperr{
								Name:  name.Name,
								Type:  fieldType,
								Count: 1,
							}
						} else {
							v.Count++
							interfaces[name.Name] = v
						}
					}
				}
			}
		}
	}

	if len(interfaces) != 0 {
		builder.WriteString("type APIErrorResponses interface {\n")
		builder.WriteString("\tStatusCode() int\n")
		for k, v := range interfaces {
			if v.Count > 5 {
				builder.WriteString(fmt.Sprintf("\tGet%s() %s\n", k, v.Type))
			}
		}
		builder.WriteString("}\n\n")
	}

	// Write to output file
	out, err := os.Create("threecommas/error_helpers.gen.go")
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating output file:", err)
		os.Exit(1)
	}
	defer out.Close()
	_, err = out.WriteString(builder.String())
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error writing to output file:", err)
		os.Exit(1)
	}
}
